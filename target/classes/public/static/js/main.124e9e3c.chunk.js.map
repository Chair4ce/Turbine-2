{"version":3,"sources":["reportWebVitals.ts","apolloClient.ts","store/site/Queries/FETCH_SITES.ts","components/MainView.tsx","components/App.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","connectToDevTools","FETCH_SITES","gql","MainView","props","useQuery","loading","error","data","data-testid","className","type","onClick","onSubmit","message","undefined","sites","map","site","name","id","App","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAceA,G,kBAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCECQ,EARA,IAAIC,eACf,CACIC,IAAK,oCACLC,MAAO,IAAIC,gBACXC,mBAAmB,I,yKCLpB,IAAMC,EAAcC,cAAH,KCiCTC,EArBmB,SAACC,GAAW,IAAD,EACRC,mBAAmBJ,GAA5CK,EADiC,EACjCA,QAASC,EADwB,EACxBA,MAAOC,EADiB,EACjBA,KAIxB,OACI,sBAAKC,cAAY,YAAYC,UAAW,YAAxC,UACI,wBAAQC,KAAM,SAAUF,cAAa,aAAcC,UAAW,aAAcE,QAL9D,WAClBR,EAAMS,YAIF,eACCP,EAAU,4CACPC,EAAQ,wCAAWA,EAAMO,WACrBN,QAAuBO,IAAfP,EAAKQ,MACT,8BACKR,EAAKQ,MAAMC,KAAI,SAACC,GAAD,OACZ,sBAAKT,cAAa,WAAYC,UAAW,UAAzC,cAAmE,4BAAIQ,EAAKC,SAAnBD,EAAKE,SAGpE,SCbXC,MAbf,WAKE,OACE,qBAAKZ,cAAY,MAAMC,UAAU,MAAjC,SACA,cAAC,EAAD,CAAUG,SALZ,WACES,QAAQC,IAAI,+BCIhBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,iBAAD,CAAgB/B,OAAQA,EAAxB,SACI,cAAC,EAAD,QAGRgC,SAASC,eAAe,SAM1B1C,M","file":"static/js/main.124e9e3c.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\n\nconst client = new ApolloClient(\n    {\n        uri: 'http://localhost:8080/api/graphql',\n        cache: new InMemoryCache(),\n        connectToDevTools: true,\n    },\n);\n\nexport default client;\n","import { gql } from '@apollo/client';\n\nexport const FETCH_SITES = gql`\n    query getSites{\n        sites {\n            id\n            name\n        }\n    }\n`;\n","import React from 'react';\nimport {useQuery} from \"@apollo/client\";\nimport SiteModel from \"../store/site/SiteModel\";\nimport {FETCH_SITES} from \"../store/site/Queries/FETCH_SITES\";\n\nexport interface SiteData {\n    sites: SiteModel[];\n}\n\nexport interface Props {\n    onSubmit: () => void;\n    className?: String;\n}\n\nconst MainView: React.FC<Props> = (props) => {\n    const { loading, error, data } = useQuery<SiteData>(FETCH_SITES);\n    const onButtonClick = () => {\n        props.onSubmit();\n    }\n    return (\n        <div data-testid=\"main-view\" className={'main_view'}>\n            <button type={\"submit\"} data-testid={\"btn-submit\"} className={'btn_submit'} onClick={onButtonClick}> </button>\n            {loading ? <p>Loading... </p> :\n                error ? <p>Uh oh! {error.message}</p> :\n                    data && data.sites !== undefined ?\n                        <div>\n                            {data.sites.map((site: any) => (\n                                <div data-testid={\"site-row\"} className={'dataRow'} key={site.id}> <p>{site.name}</p></div>\n                            ))}\n                        </div>\n                        : null}\n        </div>\n    )\n}\n\nexport default MainView;\n","import React from 'react';\nimport '../styles/App.css';\nimport MainView from \"./MainView\";\n\nfunction App() {\n\n  function onSubmit() {\n    console.log(\"Submitted the thing!!\")\n  }\n  return (\n    <div data-testid=\"app\" className=\"App\">\n    <MainView onSubmit={onSubmit}/>\n    </div>\n  );\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from '@apollo/client';\nimport './styles/index.css';\nimport './styles/App.css';\nimport './tailwind.output.css';\n\nimport reportWebVitals from './reportWebVitals';\nimport client from \"./apolloClient\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <ApolloProvider client={client}>\n          <App />\n      </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}